#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {
    'AND',
    'NOT',
    'OR',
}  # type: ignore


class BooleanQueryBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(BooleanQueryBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class BooleanQueryParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=BooleanQueryBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(BooleanQueryParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa
        self._expr_()
        self._check_eof()

    @tatsumasu()
    def _primaryexpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._word_()
            with self._option():
                self._token('"')
                self._cut()
                self._phrase_()
                self.name_last_node('@')
                self._token('"')
            with self._option():
                self._token('(')
                self._cut()
                self._expr_()
                self.name_last_node('@')
                self._token(')')
            self._error('no available options')

    @tatsumasu('NotOperator')
    def _notexpr_(self):  # noqa
        with self._optional():
            self._token('NOT')
            self.name_last_node('op')
        self._cut()
        self._primaryexpr_()
        self.name_last_node('fst')
        self.ast._define(
            ['fst', 'op'],
            []
        )

    @tatsumasu('AndOperator')
    def _andexpr_(self):  # noqa
        self._notexpr_()
        self.name_last_node('fst')

        def block1():
            self._token('AND')
            self.name_last_node('op')
            self._notexpr_()
            self.name_last_node('lst')
        self._closure(block1)
        self.ast._define(
            ['fst', 'lst', 'op'],
            []
        )

    @tatsumasu('OrOperator')
    def _expr_(self):  # noqa
        self._andexpr_()
        self.name_last_node('fst')

        def block1():
            self._token('OR')
            self.name_last_node('op')
            self._andexpr_()
            self.name_last_node('lst')
        self._closure(block1)
        self.ast._define(
            ['fst', 'lst', 'op'],
            []
        )

    @tatsumasu('str')
    def _word_(self):  # noqa
        self._pattern(r'(\w|\*)+')
        self._check_name()

    @tatsumasu('str')
    def _phrase_(self):  # noqa

        def sep0():
            self._pattern(r'\s+')

        def block0():
            self._word_()
        self._positive_gather(block0, sep0)


class BooleanQuerySemantics(object):
    def start(self, ast):  # noqa
        return ast

    def primaryexpr(self, ast):  # noqa
        return ast

    def notexpr(self, ast):  # noqa
        return ast

    def andexpr(self, ast):  # noqa
        return ast

    def expr(self, ast):  # noqa
        return ast

    def word(self, ast):  # noqa
        return ast

    def phrase(self, ast):  # noqa
        return ast


def main(filename, start='start', **kwargs):
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = BooleanQueryParser()
    return parser.parse(text, start=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, BooleanQueryParser, name='BooleanQuery')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()